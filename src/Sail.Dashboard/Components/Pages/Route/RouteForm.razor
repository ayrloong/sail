@using Sail.Dashboard.Models.Routes;
@using Sail.Dashboard.Services
@inject NavigationManager NavigationManager
@page "/routes/form/{RouteId?}" 
@inject RouteService RouteService

<div>
    <header class="mb-8">
        <h2 class="text-3xl font-semibold text-gray-800">@Title Route</h2>
        <p class="text-gray-500 mt-1">@Description</p>
    </header>

    @if (Route == null)
    {
        <div class="p-8 text-center text-gray-400">Loading...</div>
    }
    else
    {
        <div class="bg-white p-6 md:p-10 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-200">
        <EditForm Model="Route" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Route Name -->
            <div class="mb-8">
                <label for="routeName" class="block text-sm font-medium text-gray-700 mb-2">Route Name</label>
                <InputText id="routeName" @bind-Value="Route.Name" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                <ValidationMessage For="@(() => Route.Name)" />
                <p class="mt-1 text-xs text-gray-500">A descriptive name for this route.</p>
            </div>

            <!-- Cluster ID -->
            <div class="mb-8">
                <label for="clusterId" class="block text-sm font-medium text-gray-700 mb-2">Cluster ID (Optional)</label>
                <InputText id="clusterId" @bind-Value="Route.ClusterId" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                <p class="mt-1 text-xs text-gray-500">The ID of the cluster this route belongs to.</p>
            </div>

            <!-- Route Path -->
            <div class="mb-8">
                <label for="routePath" class="block text-sm font-medium text-gray-700 mb-2">Route Path</label>
                <InputText id="routePath" @bind-Value="Route.Match.Path" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                <ValidationMessage For="@(() => Route.Match.Path)" />
                <p class="mt-1 text-xs text-gray-500">The public path for this route (e.g., /users). Corresponds to Match.Path.</p>
            </div>

            <!-- HTTP Methods -->
            <div class="mb-8">
                <label class="block text-sm font-medium text-gray-700 mb-2">Allowed HTTP Methods</label>
                <div class="mt-3 flex flex-wrap gap-x-6 gap-y-3 items-baseline">
                    @foreach (var method in AllHttpMethods)
                    {
                        <div class="flex items-center">
                            <input type="checkbox" id="method_@method" value="@method" checked="@Route.Match.Methods?.Contains(method)" @onchange="args => ToggleMethod(method, (bool)args.Value!)" class="h-4 w-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500" />
                            <label for="method_@method" class="ml-2 block text-sm text-gray-900">@method</label>
                        </div>
                    }
                </div>
                <p class="mt-2 text-xs text-gray-500">Select HTTP methods allowed for this route. Corresponds to Match.Methods.</p>
            </div>

            <!-- Hosts -->
            <div class="mb-8">
                <label for="hosts" class="block text-sm font-medium text-gray-700 mb-2">Hosts</label>
                <InputTextArea id="hosts" @bind-Value="HostValues" rows="2" class="mt-1 block w-full px-4 py-2.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" placeholder="example.com, *.example.org" />
                <p class="mt-2 text-xs text-gray-500">Comma-separated list of hostnames to match (e.g., example.com, *.example.com). Corresponds to Match.Hosts.</p>
            </div>

            <!-- Headers Matching Rules -->
            <div class="mb-8">
                <h4 class="text-lg font-semibold text-gray-700 mb-3 border-b pb-2">Header Matching Rules</h4>
                @foreach (var headerRule in Route.Match?.Headers ?? [])
                {
                    var localHeaderRule = headerRule; // Avoid closure issues in loop
                    <div class="space-y-6 p-6 border border-gray-200 rounded-lg bg-gray-50/50 mb-4">
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-x-6 gap-y-4 items-end">
                            <div>
                                <label class="block text-xs font-medium text-gray-600 mb-1.5">Header Name</label>
                                <InputText @bind-Value="localHeaderRule.Name" placeholder="X-Custom-Header" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                            </div>

                            <div>
                                <label class="block text-xs font-medium text-gray-600 mb-1.5">Match Mode</label>
                                <InputSelect @bind-Value="localHeaderRule.Mode" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm">
                                    @foreach (var mode in Enum.GetValues(typeof(HeaderMatchMode)))
                                    {
                                        <option value="@mode">@mode.ToString()</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="flex items-center self-end pb-1.5">
                                <InputCheckbox @bind-Value="localHeaderRule.IsCaseSensitive" class="h-4 w-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500" />
                                <label class="ml-2 block text-sm text-gray-900">Case Sensitive</label>
                            </div>
                        </div>
                        <button type="button" @onclick="() => RemoveHeaderRule(localHeaderRule)" class="mt-2 px-3 py-1.5 border border-red-300 rounded-md text-xs font-medium text-red-700 hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">Remove Rule</button>
                    </div>
                }
                <button type="button" @onclick="AddHeaderRule" class="mt-4 px-4 py-2 border border-dashed border-gray-400 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
                    </svg>
                    Add Header Rule
                </button>
            </div>

            <!-- Query Parameters Matching Rules -->
            <div class="mb-8">
                <h4 class="text-lg font-semibold text-gray-700 mb-3 border-b pb-2">Query Parameter Matching Rules</h4>
                 @foreach (var queryRule in Route.Match?.QueryParameters ?? [])
                {
                    var localQueryRule = queryRule; // Avoid closure issues in loop
                    <div class="space-y-6 p-6 border border-gray-200 rounded-lg bg-gray-50/50 mb-4">
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-x-6 gap-y-4 items-end">
                            <div>
                                <label class="block text-xs font-medium text-gray-600 mb-1.5">Parameter Name</label>
                                <InputText @bind-Value="localQueryRule.Name" placeholder="param_name" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                            </div>

                            <div>
                                <label class="block text-xs font-medium text-gray-600 mb-1.5">Match Mode</label>
                                <InputSelect @bind-Value="localQueryRule.Mode" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm">
                                    @foreach (var mode in Enum.GetValues(typeof(QueryParameterMatchMode)))
                                    {
                                        <option value="@mode">@mode.ToString()</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="flex items-center self-end pb-1.5">
                                <InputCheckbox @bind-Value="localQueryRule.IsCaseSensitive" class="h-4 w-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500" />
                                <label class="ml-2 block text-sm text-gray-900">Case Sensitive</label>
                            </div>
                        </div>
                        <button type="button" @onclick="() => RemoveQueryParameterRule(localQueryRule)" class="mt-2 px-3 py-1.5 border border-red-300 rounded-md text-xs font-medium text-red-700 hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">Remove Rule</button>
                    </div>
                }
                <button type="button" @onclick="AddQueryParameterRule" class="mt-4 px-4 py-2 border border-dashed border-gray-400 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 flex items-center">
                     <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
                    </svg>
                    Add Query Rule
                </button>
            </div>

            <!-- Action Buttons -->
            <div class="flex justify-end space-x-4 pt-8 border-t mt-10">
                <button type="button" @onclick="Cancel" class="px-5 py-2.5 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500">
                    Cancel
                </button>
                <button type="submit" class="px-5 py-2.5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-teal-700 hover:bg-teal-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500">
                    Save Changes
                </button>
            </div>
        </EditForm>
    </div>

    }
 </div>



@code {
    [Parameter] public string? RouteId { get; set; }
    RouteRequest? Route;
    private string Title = "Create";
    private string Description = "Add a new route to the gateway.";

    private string HostValues
    {
        get => string.Join(", ", Route.Match?.Hosts ?? []);
        set => Route.Match.Hosts = value.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();
    }

    private List<string> AllHttpMethods = ["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"];

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(RouteId))
        {
            var result = await RouteService.GetAsync(RouteId, CancellationToken.None);
            Route = new RouteRequest
            {
                Name = result.Name,
                ClusterId = result.ClusterId,
                Match = result.Match != null
                    ? new RouteMatch
                    {
                        Path = result.Match.Path,
                        Methods = result.Match.Methods != null ? [..result.Match.Methods] : [],
                        Hosts = result.Match.Hosts != null ? [..result.Match.Hosts] : [],
                        Headers = result.Match.Headers != null
                            ? result.Match.Headers.Select(h => new RouteHeader
                            {
                                Name = h.Name,
                                Mode = h.Mode,
                                Values = h.Values != null ? [..h.Values] : [],
                                IsCaseSensitive = h.IsCaseSensitive
                            }).ToList()
                            : [],
                        QueryParameters = result.Match.QueryParameters != null
                            ? result.Match.QueryParameters.Select(q => new RouteQueryParameter
                            {
                                Name = q.Name,
                                Mode = q.Mode,
                                Values = q.Values != null ? [..q.Values] : [],
                                IsCaseSensitive = q.IsCaseSensitive
                            }).ToList()
                            : []
                    }
                    : new RouteMatch()
            };
        }
        else
        {
            Route = new RouteRequest
            {
                Match = new RouteMatch
                {
                    Headers = [],
                    QueryParameters = [],
                    Methods = [],
                    Hosts = []
                }
            };
        }
    }

    private async Task HandleValidSubmit()
    {

        if (string.IsNullOrEmpty(RouteId))
        {
            await RouteService.CreateAsync(Route!, CancellationToken.None);
        }
        else
        {
            await RouteService.UpdateAsync(RouteId, Route!, CancellationToken.None);
        }

        NavigationManager.NavigateTo("/routes");
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Form Submitted: Invalid");
    }

    private void ToggleMethod(string method, bool @checked)
    {
        if (@checked)
        {
            if (!Route.Match.Methods.Contains(method))
                Route.Match.Methods.Add(method);
        }
        else
        {
            Route.Match.Methods.Remove(method);
        }
    }

    private void AddHeaderRule()
    {
        Route.Match.Headers.Add(new RouteHeader());
    }

    private void RemoveHeaderRule(RouteHeader headerRule)
    {
        Route.Match.Headers.Remove(headerRule);
    }

    private void AddQueryParameterRule()
    {
        Route.Match.QueryParameters.Add(new RouteQueryParameter());
    }

    private void RemoveQueryParameterRule(RouteQueryParameter queryParameterRule)
    {
        Route.Match.QueryParameters.Remove(queryParameterRule);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/routes");
    }
}





