@page "/routes/{routeId}"
@using Sail.Dashboard.Models.Routes
@using Sail.Dashboard.Services
@inject RouteService RouteService

<style>
    /* Taiwind CSS */
    body, .details-value, .details-label, h2, h4, p, div, span, a, button {
        font-family: 'ui-sans-serif', 'system-ui', 'Segoe UI', 'Helvetica Neue', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif;
        letter-spacing: 0.01em;
    }
    h2, h4 {
        font-weight: 600;
        letter-spacing: 0.01em;
    }
    .details-label {
        font-size: 0.75rem; /* text-xs */
        color: #6b7280;    /* text-gray-500 */
        font-weight: 500;  /* font-medium */
        letter-spacing: 0.02em;
    }
    .details-value {
        font-size: 1rem;   /* text-base */
        color: #111827;    /* text-gray-900 */
        font-weight: 400;  /* font-normal */
        letter-spacing: 0.01em;
    }
    a, button {
        font-size: 0.875rem; /* text-sm */
        font-weight: 500;    /* font-medium */
        letter-spacing: 0.01em;
    }
</style>

<div>
@if (Route is not null)
{
            <header class="mb-8 flex justify-between items-center">
                <div>
                    <h2 class="text-3xl font-semibold text-gray-800">Route Details</h2>
                    <p class="text-gray-500 mt-1" id="routeNameDisplay">Viewing details for route: @Route.Name</p>
                </div>
                <NavLink href="/routes" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500">
                    Back to Routes
                </NavLink>
            </header>

            <div class="bg-white p-6 md:p-8 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-200">
                <!-- Route General Information -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6 mb-8 pb-8 border-b">
                    <div>
                        <p class="details-label">Route Name</p>
                        <p class="details-value" id="routeNameValue">@Route.Name</p>
                    </div>
                    <div>
                        <p class="details-label">Cluster ID</p>
                        <p class="details-value" id="clusterIdValue">@(Route.ClusterId?.ToString() ?? "N/A")</p>
                    </div>
                    <div>
                        <p class="details-label">Route Path</p>
                        <p class="details-value" id="routePathValue">@Route.Match.Path</p>
                    </div>
                    <div>
                        <p class="details-label">Allowed HTTP Methods</p>
                        <div class="details-value flex flex-wrap gap-2" id="httpMethodsValue">
                            @if (Route.Match.Methods != null && Route.Match.Methods.Any())
                            {
                                @foreach (var method in Route.Match.Methods)
                                {
                                    <span class="inline-block bg-teal-100 text-teal-700 text-xs font-semibold px-2.5 py-1 rounded-full">@method</span>
                                }
                            }
                            else
                            {
                                <span class="text-xs text-gray-500">N/A</span>
                            }
                        </div>
                    </div>
                    <div>
                        <p class="details-label">Hosts</p>
                        <div class="details-value flex flex-wrap gap-2" id="hostsValue">
                            @if (Route.Match.Hosts != null && Route.Match.Hosts.Any())
                            {
                                @foreach (var host in Route.Match.Hosts)
                                {
                                    <span class="inline-block bg-gray-100 text-gray-700 text-xs font-medium px-2.5 py-1 rounded-full">@host</span>
                                }
                            }
                            else
                            {
                                <span class="text-xs text-gray-500">N/A</span>
                            }
                        </div>
                    </div>
                </div>

                <!-- Header Matching Rules -->
                <div class="mb-8 pb-8 border-b">
                    <h4 class="text-xl font-semibold text-gray-700 mb-4">Header Matching Rules</h4>
                    <div id="headerRulesContainer" class="space-y-4">
                        @if (Route.Match.Headers != null && Route.Match.Headers.Any())
                        {
                            @foreach (var headerRule in Route.Match.Headers)
                            {
                                <div class="p-3 border border-gray-200 rounded bg-gray-50">
                                    <div class="grid grid-cols-1 md:grid-cols-3 gap-x-6 gap-y-2">
                                        <div>
                                            <div class="text-xs text-gray-500 mb-1">Header Name</div>
                                            <div class="text-sm text-gray-900">@headerRule.Name</div>
                                        </div>
                                        <div>
                                            <div class="text-xs text-gray-500 mb-1">Values</div>
                                            <div class="text-sm text-gray-900">@(headerRule.Values != null && headerRule.Values.Any() ? string.Join(", ", headerRule.Values) : "N/A")</div>
                                        </div>
                                        <div>
                                            <div class="text-xs text-gray-500 mb-1">Mode</div>
                                            <div class="text-sm text-gray-900">@headerRule.Mode</div>
                                        </div>
                                    </div>
                                    <div class="mt-2">
                                        <div class="text-xs text-gray-500 mb-1">Case Sensitive</div>
                                        <div class="text-sm text-gray-900">@(headerRule.IsCaseSensitive ? "Yes" : "No")</div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-sm text-gray-400">No header matching rules defined.</div>
                        }
                    </div>
                </div>

                <!-- Query Parameter Matching Rules -->
                <div class="mb-8">
                    <h4 class="text-base font-semibold text-gray-900 mb-3">Query Parameter Matching Rules</h4>
                    <div class="space-y-3">
                        @if (Route.Match.QueryParameters != null && Route.Match.QueryParameters.Any())
                        {
                            @foreach (var queryRule in Route.Match.QueryParameters)
                            {
                                <div class="p-3 border border-gray-200 rounded bg-gray-50">
                                    <div class="grid grid-cols-1 md:grid-cols-3 gap-x-6 gap-y-2">
                                        <div>
                                            <div class="text-xs text-gray-500 mb-1">Parameter Name</div>
                                            <div class="text-sm text-gray-900">@queryRule.Name</div>
                                        </div>
                                        <div>
                                            <div class="text-xs text-gray-500 mb-1">Values</div>
                                            <div class="text-sm text-gray-900">@(queryRule.Values != null && queryRule.Values.Any() ? string.Join(", ", queryRule.Values) : "N/A")</div>
                                        </div>
                                        <div>
                                            <div class="text-xs text-gray-500 mb-1">Mode</div>
                                            <div class="text-sm text-gray-900">@queryRule.Mode</div>
                                        </div>
                                    </div>
                                    <div class="mt-2">
                                        <div class="text-xs text-gray-500 mb-1">Case Sensitive</div>
                                        <div class="text-sm text-gray-900">@(queryRule.IsCaseSensitive ? "Yes" : "No")</div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-sm text-gray-400">No query parameter matching rules defined.</div>
                        }
                    </div>
                </div>
            </div>
}
else
{
    <div class="max-w-xl mx-auto text-center py-16">
        <svg class="mx-auto mb-4 h-10 w-10 text-gray-300" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" /><path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4m0 4h.01" /></svg>
        <p class="text-gray-400 text-base">Loading route details or route not found...</p>
    </div>
}
</div>

@code {

    private RouteResult? Route { get; set; }
    [Parameter] public string? RouteId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Route = await RouteService.GetAsync(RouteId, CancellationToken.None);
    }
}

