@page "/clusters"
@using Microsoft.FluentUI.AspNetCore.Components
@using Sail.Dashboard.Models.Clusters
@using Sail.Dashboard.Services
@using Sail.Dashboard.Components.Shared
@inject ClusterService ClusterService

<div>
    <header class="mb-8 flex justify-between items-center">
        <div>
            <h2 class="text-3xl font-semibold text-gray-800">All Service Clusters</h2>
            <p class="text-gray-500 mt-1">Manage and view all configured service clusters.</p>
        </div>
        <NavLink href="/clusters/form" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-teal-700 hover:bg-teal-800 hover:text-teal-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 flex items-center transition-colors duration-150">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            Add New Cluster
        </NavLink>
    </header>

    <!-- Service Clusters Table -->
    <div class="bg-white p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-200">
        <div class="overflow-x-auto">
            @if (Clusters == null)
            {
                <p><em>Loading service clusters...</em></p>
            }
            else if (!Clusters.Any())
            {
                <p>No service clusters found. <NavLink href="/clusters/form">Add one now!</NavLink></p>
            }
            else
            {
                <table class="w-full min-w-lg">
                    <thead>
                    <tr class="text-left text-xs text-gray-500 uppercase border-b">
                        <th class="py-3 px-4 font-medium">Name</th>
                        <th class="py-3 px-4 font-medium">Service Name</th>
                        <th class="py-3 px-4 font-medium">Load Balancing</th>
                        <th class="py-3 px-4 font-medium">Destinations</th>
                        <th class="py-3 px-4 font-medium">Active Health Check</th>
                        <th class="py-3 px-4 font-medium">Session Affinity</th>
                        <th class="py-3 px-4 font-medium">Created At</th>
                        <th class="py-3 px-4 font-medium text-right">Actions</th>
                    </tr>
                    </thead>
                    <tbody class="text-gray-700">
                    @foreach (var cluster in Clusters)
                    {
                        <tr class="@(Clusters.LastOrDefault() == cluster ? "hover:bg-gray-50" : "border-b hover:bg-gray-50")" @key="cluster.Id">
                            <td class="py-3 px-4">
                                <a href="/clusters/@cluster.Id" class="text-blue-600 hover:underline">@cluster.Name</a>
                            </td>
                            <td class="py-3 px-4">@cluster.ServiceName</td>
                            <td class="py-3 px-4">@cluster.LoadBalancingPolicy</td>
                            <td class="py-3 px-4 text-center">@(cluster.Destinations?.Count ?? 0)</td>
                            <td class="py-3 px-4">
                                @if (cluster.HealthCheck?.Active?.Enabled == true)
                                {
                                    <span class="inline-block bg-green-100 text-green-700 text-xs font-semibold px-2 py-0.5 rounded-full">Enabled</span>
                                }
                                else
                                {
                                    <span class="inline-block bg-gray-100 text-gray-700 text-xs font-semibold px-2 py-0.5 rounded-full">Disabled</span>
                                }
                            </td>
                            <td class="py-3 px-4">
                                @if (cluster.SessionAffinity?.Enabled == true)
                                {
                                    <span class="inline-block bg-green-100 text-green-700 text-xs font-semibold px-2 py-0.5 rounded-full">Enabled</span>
                                }
                                else
                                {
                                    <span class="inline-block bg-gray-100 text-gray-700 text-xs font-semibold px-2 py-0.5 rounded-full">Disabled</span>
                                }
                            </td>
                            <td class="py-3 px-4">@cluster.CreatedAt.ToString("yyyy-MM-dd")</td>
                            <td class="py-3 px-4 text-right">
                                <div class="flex items-center justify-end gap-2">
                                    <a href="/clusters/@cluster.Id" class="group p-1 rounded hover:bg-gray-100 transition-colors" title="View Details">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 group-hover:text-blue-600 transition-colors" viewBox="0 0 20 20" fill="currentColor">
                                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.022 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                                        </svg>
                                    </a>
                                    <a href="/clusters/form/@cluster.Id" class="group p-1 rounded hover:bg-gray-100 transition-colors" title="Edit Cluster">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 group-hover:text-teal-600 transition-colors" viewBox="0 0 20 20" fill="currentColor">
                                            <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                            <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                        </svg>
                                    </a>
                                    <button @onclick="() => DeleteCluster(cluster.Id)" class="group p-1 rounded hover:bg-gray-100 transition-colors focus:outline-none border-none" title="Delete Cluster">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 group-hover:text-red-600 transition-colors" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                        </svg>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@code {

    private List<ClusterResult>? Clusters { get; set; }
    [Inject] private IDialogService DialogService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Clusters = await ClusterService.ListAsync(CancellationToken.None);
    }

    private async Task DeleteCluster(Guid id)
    {
        var parameters = new DialogParameters()
        {
            { nameof(ConfirmDialog.Title), "Delete Service Cluster" },
            { nameof(ConfirmDialog.Message), "Are you sure you want to delete this service cluster? This action cannot be undone." },
        };

        var dialogReference = await DialogService.ShowDialogAsync<ConfirmDialog>(parameters);

        var result = await dialogReference.Result;

        if (result.Cancelled)
        {
            return;
        }

        await ClusterService.DeleteAsync(id, CancellationToken.None);
        Clusters = await ClusterService.ListAsync(CancellationToken.None); // Refresh the list
        StateHasChanged();
    }
}