@page "/clusters/form/{ClusterId?}" 
@using Sail.Dashboard.Models.Clusters
@using Sail.Dashboard.Services 
@inject ClusterService ClusterService
@inject NavigationManager NavigationManager

<div>
    <header class="mb-8">
        <h2 class="text-3xl font-semibold text-gray-800">@Title Cluster</h2>
        <p class="text-gray-500 mt-1">@Description</p>
    </header>

    @if (ClusterRequest == null)
    {
        <div class="p-8 text-center text-gray-400">Loading cluster configuration...</div>
    }
    else
    {
        <div class="bg-white p-6 md:p-10 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-200">
            <EditForm Model="ClusterRequest" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="mb-4 p-3 bg-red-50 text-red-700 border border-red-200 rounded" />

                <!-- General Information -->
                <fieldset class="mb-8 p-4 border border-gray-200 rounded-md">
                    <legend class="text-lg font-semibold text-gray-700 px-2">General Information</legend>

                    <div class="mb-6">
                        <label for="clusterName" class="block text-sm font-medium text-gray-700 mb-1">Cluster Name</label>
                        <InputText id="clusterName" @bind-Value="ClusterRequest.Name" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                        <ValidationMessage For="@(() => ClusterRequest.Name)" />
                        <p class="mt-1 text-xs text-gray-500">A unique name for this service cluster.</p>
                    </div>

                    <div class="mb-6">
                        <label for="serviceName" class="block text-sm font-medium text-gray-700 mb-1">Service Name (Optional)</label>
                        <InputText id="serviceName" @bind-Value="ClusterRequest.ServiceName" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                        <p class="mt-1 text-xs text-gray-500">The service name for service discovery.</p>
                    </div>

                    <div class="mb-6">
                        <label for="loadBalancingPolicy" class="block text-sm font-medium text-gray-700 mb-1">Load Balancing Policy</label>
                        <InputText id="loadBalancingPolicy" @bind-Value="ClusterRequest.LoadBalancingPolicy" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" placeholder="e.g., RoundRobin, LeastRequests"/>
                        <ValidationMessage For="@(() => ClusterRequest.LoadBalancingPolicy)" />
                        <p class="mt-1 text-xs text-gray-500">The load balancing policy to use for this cluster.</p>
                    </div>
                </fieldset>

                <!-- Destinations -->
                <fieldset class="mb-8 p-4 border border-gray-200 rounded-md">
                    <legend class="text-lg font-semibold text-gray-700 px-2">Destinations</legend>
                    @if(ClusterRequest.Destinations != null)
                    {
                        @foreach (var destination in ClusterRequest.Destinations)
                        {
                            var localDestination = destination;
                            <div class="space-y-4 p-4 border border-gray-200 rounded-md bg-gray-50/50 mb-4">
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-x-6 gap-y-4 items-end">
                                    <div>
                                        <label class="block text-xs font-medium text-gray-600 mb-1">Address</label>
                                        <InputText @bind-Value="localDestination.Address" placeholder="http://localhost:5000" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-600 mb-1">Health (Optional)</label>
                                        <InputText @bind-Value="localDestination.Health" placeholder="http://localhost:5000/health" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-600 mb-1">Host (Optional)</label>
                                        <InputText @bind-Value="localDestination.Host" placeholder="override.example.com" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                    </div>
                                </div>
                                <button type="button" @onclick="() => RemoveDestination(localDestination)" class="mt-2 px-3 py-1.5 border border-red-300 rounded-md text-xs font-medium text-red-700 hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">Remove Destination</button>
                            </div>
                        }
                    }
                    <button type="button" @onclick="AddDestination" class="mt-4 px-4 py-2 border border-dashed border-gray-400 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" /></svg>
                        Add Destination
                    </button>
                </fieldset>
                
                <!-- Health Check Configuration -->
                <fieldset class="mb-8 p-4 border border-gray-200 rounded-md">
                    <legend class="text-lg font-semibold text-gray-700 px-2">Health Check</legend>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Available Destinations Policy (Optional)</label>
                        <InputText @bind-Value="ClusterRequest.HealthCheck.AvailableDestinationsPolicy" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                    </div>

                    <!-- Active Health Check -->
                    <div class="mb-6 p-3 border border-gray-100 rounded-md">
                        <div class="flex items-center mb-2">
                            <InputCheckbox @bind-Value="ClusterRequest.HealthCheck.Active.Enabled" id="activeHealthEnabled" class="h-4 w-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500" />
                            <label for="activeHealthEnabled" class="ml-2 text-sm font-medium text-gray-700">Enable Active Health Check</label>
                        </div>
                        @if (ClusterRequest.HealthCheck.Active.Enabled == true)
                        {
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4 mt-3 pl-6 border-l-2 border-teal-500">
                                <div>
                                    <label class="block text-xs font-medium text-gray-600 mb-1">Interval (e.g., 00:00:30)</label>
                                    <InputText @bind-Value="ActiveHealthIntervalString" placeholder="HH:mm:ss" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-600 mb-1">Timeout (e.g., 00:00:05)</label>
                                    <InputText @bind-Value="ActiveHealthTimeoutString" placeholder="HH:mm:ss" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-600 mb-1">Policy</label>
                                    <InputText @bind-Value="ClusterRequest.HealthCheck.Active.Policy" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-600 mb-1">Path</label>
                                    <InputText @bind-Value="ClusterRequest.HealthCheck.Active.Path" placeholder="/healthz" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                </div>
                                <div class="md:col-span-2">
                                    <label class="block text-xs font-medium text-gray-600 mb-1">Query (Optional)</label>
                                    <InputText @bind-Value="ClusterRequest.HealthCheck.Active.Query" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Passive Health Check -->
                    <div class="p-3 border border-gray-100 rounded-md">
                        <div class="flex items-center mb-2">
                            <InputCheckbox @bind-Value="ClusterRequest.HealthCheck.Passive.Enabled" id="passiveHealthEnabled" class="h-4 w-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500" />
                            <label for="passiveHealthEnabled" class="ml-2 text-sm font-medium text-gray-700">Enable Passive Health Check</label>
                        </div>
                        @if (ClusterRequest.HealthCheck.Passive.Enabled == true)
                        {
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4 mt-3 pl-6 border-l-2 border-teal-500">
                                <div>
                                    <label class="block text-xs font-medium text-gray-600 mb-1">Policy</label>
                                    <InputText @bind-Value="ClusterRequest.HealthCheck.Passive.Policy" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-600 mb-1">Reactivation Period (e.g., 00:05:00)</label>
                                    <InputText @bind-Value="PassiveHealthReactivationPeriodString" placeholder="HH:mm:ss" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                </div>
                            </div>
                        }
                    </div>
                </fieldset>
                
                <!-- Session Affinity -->
                <fieldset class="mb-8 p-4 border border-gray-200 rounded-md">
                    <legend class="text-lg font-semibold text-gray-700 px-2">Session Affinity</legend>
                    <div class="flex items-center mb-4">
                        <InputCheckbox @bind-Value="ClusterRequest.SessionAffinity.Enabled" id="sessionAffinityEnabled" class="h-4 w-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500" />
                        <label for="sessionAffinityEnabled" class="ml-2 text-sm font-medium text-gray-700">Enable Session Affinity</label>
                    </div>

                    @if (ClusterRequest.SessionAffinity.Enabled == true)
                    {
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4 mb-6 pl-6 border-l-2 border-teal-500">
                            <div>
                                <label class="block text-xs font-medium text-gray-600 mb-1">Policy</label>
                                <InputText @bind-Value="ClusterRequest.SessionAffinity.Policy" placeholder="e.g., Cookie, CustomHeader" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                            </div>
                            <div>
                                <label class="block text-xs font-medium text-gray-600 mb-1">Failure Policy (Optional)</label>
                                <InputText @bind-Value="ClusterRequest.SessionAffinity.FailurePolicy" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                            </div>
                            <div>
                                <label class="block text-xs font-medium text-gray-600 mb-1">Affinity Key Name</label>
                                <InputText @bind-Value="ClusterRequest.SessionAffinity.AffinityKeyName" placeholder="e.g., .Yarp.Affinity" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                            </div>
                        </div>

                        <!-- Cookie Options -->
                        @if (ClusterRequest.SessionAffinity.Policy?.Equals("Cookie", StringComparison.OrdinalIgnoreCase) == true)
                        {
                            <div class="p-3 border border-gray-100 rounded-md mt-4">
                                <h4 class="text-md font-semibold text-gray-700 mb-3">Cookie Options</h4>
                                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4 pl-6 border-l-2 border-blue-500">
                                    <div>
                                        <label class="block text-xs font-medium text-gray-600 mb-1">Path</label>
                                        <InputText @bind-Value="ClusterRequest.SessionAffinity.Cookie.Path" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-600 mb-1">Domain (Optional)</label>
                                        <InputText @bind-Value="ClusterRequest.SessionAffinity.Cookie.Domain" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                    </div>
                                     <div>
                                        <label class="block text-xs font-medium text-gray-600 mb-1">Expiration (e.g., 01:00:00)</label>
                                        <InputText @bind-Value="CookieExpirationString" placeholder="HH:mm:ss" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-600 mb-1">Max Age (e.g., 01:00:00)</label>
                                        <InputText @bind-Value="CookieMaxAgeString" placeholder="HH:mm:ss" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-600 mb-1">Secure Policy</label>
                                        <InputSelect @bind-Value="ClusterRequest.SessionAffinity.Cookie.SecurePolicy" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm">
                                            <option value="">Select...</option>
                                            @foreach (var val in Enum.GetValues<CookieSecurePolicy>())
                                            { <option value="@val">@val.ToString()</option> }
                                        </InputSelect>
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-600 mb-1">SameSite Mode</label>
                                        <InputSelect @bind-Value="ClusterRequest.SessionAffinity.Cookie.SameSite" class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 sm:text-sm">
                                            <option value="">Select...</option>
                                            @foreach (var val in Enum.GetValues<SameSiteMode>())
                                            { <option value="@val">@val.ToString()</option> }
                                        </InputSelect>
                                    </div>
                                    <div class="flex items-center pt-4">
                                        <InputCheckbox @bind-Value="ClusterRequest.SessionAffinity.Cookie.HttpOnly" id="cookieHttpOnly" class="h-4 w-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500" />
                                        <label for="cookieHttpOnly" class="ml-2 text-sm text-gray-900">HttpOnly</label>
                                    </div>
                                    <div class="flex items-center pt-4">
                                        <InputCheckbox @bind-Value="ClusterRequest.SessionAffinity.Cookie.IsEssential" id="cookieIsEssential" class="h-4 w-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500" />
                                        <label for="cookieIsEssential" class="ml-2 text-sm text-gray-900">Is Essential</label>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </fieldset>

                <!-- Action Buttons -->
                <div class="flex justify-end space-x-4 pt-8 border-t mt-10">
                    <button type="button" @onclick="Cancel" class="px-5 py-2.5 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500">
                        Cancel
                    </button>
                    <button type="submit" class="px-5 py-2.5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-teal-700 hover:bg-teal-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500">
                        @SubmitButtonText
                    </button>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter] public string? ClusterId { get; set; }
    private ClusterRequest? ClusterRequest { get; set; }
    private string Title = "Create";
    private string Description = "Add a new service cluster to the gateway.";
    private string SubmitButtonText = "Create Cluster";

    // Helper properties for TimeSpan conversion
    private string? ActiveHealthIntervalString { get => ClusterRequest?.HealthCheck?.Active?.Interval?.ToString(); set => TryParseTimeSpan(value, ts => ClusterRequest.HealthCheck.Active.Interval = ts); }
    private string? ActiveHealthTimeoutString { get => ClusterRequest?.HealthCheck?.Active?.Timeout?.ToString(); set => TryParseTimeSpan(value, ts => ClusterRequest.HealthCheck.Active.Timeout = ts); }
    private string? PassiveHealthReactivationPeriodString { get => ClusterRequest?.HealthCheck?.Passive?.ReactivationPeriod?.ToString(); set => TryParseTimeSpan(value, ts => ClusterRequest.HealthCheck.Passive.ReactivationPeriod = ts); }
    private string? CookieExpirationString { get => ClusterRequest?.SessionAffinity?.Cookie?.Expiration?.ToString(); set => TryParseTimeSpan(value, ts => ClusterRequest.SessionAffinity.Cookie.Expiration = ts); }
    private string? CookieMaxAgeString { get => ClusterRequest?.SessionAffinity?.Cookie?.MaxAge?.ToString(); set => TryParseTimeSpan(value, ts => ClusterRequest.SessionAffinity.Cookie.MaxAge = ts); }

    private void TryParseTimeSpan(string? value, Action<TimeSpan?> setter)
    {
        if (TimeSpan.TryParse(value, out var timeSpan))
        {
            setter(timeSpan);
        }
        else
        {
            setter(null); // Or handle error, e.g., by not changing the value or setting a validation message
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(ClusterId) && Guid.TryParse(ClusterId, out var idGuid))
        {
            Title = "Edit";
            Description = "Modify the details of an existing service cluster.";
            SubmitButtonText = "Save Changes";
            var result = await ClusterService.GetAsync(idGuid, CancellationToken.None);
            if (result != null) 
            {
                // Map result to a mutable request object if necessary, or use directly if models are suitable
                ClusterRequest = new ClusterRequest // Assuming direct use or a mapping constructor/method
                {
                    Name = result.Name,
                    ServiceName = result.ServiceName,
                    LoadBalancingPolicy = result.LoadBalancingPolicy,
                    Destinations = result.Destinations?.Select(d => new Destination { Id = d.Id, Address = d.Address, Health = d.Health, Host = d.Host }).ToList() ?? new List<Destination>(),
                    HealthCheck = result.HealthCheck ?? new HealthCheck(),
                    SessionAffinity = result.SessionAffinity ?? new SessionAffinity(),
                };
                // Ensure nested objects are initialized for binding
                ClusterRequest.HealthCheck.Active ??= new ActiveHealthCheck();
                ClusterRequest.HealthCheck.Passive ??= new PassiveHealthCheck();
                ClusterRequest.SessionAffinity.Cookie ??= new SessionAffinityCookie();
            }
            else
            {
                 // Cluster not found, redirect or show error
                NavigationManager.NavigateTo("/clusters"); 
            }
        }
        else
        {
            Title = "Create";
            Description = "Add a new service cluster to the gateway.";
            SubmitButtonText = "Create Cluster";
            ClusterRequest = new ClusterRequest
            {
                Destinations = new List<Destination>(),
                HealthCheck = new HealthCheck
                {
                    Active = new ActiveHealthCheck(),
                    Passive = new PassiveHealthCheck()
                },
                SessionAffinity = new SessionAffinity
                {
                    Cookie = new SessionAffinityCookie()
                }
            };
        }
    }

    private async Task HandleValidSubmit()
    { 
        if (string.IsNullOrEmpty(ClusterId))
        {
            await ClusterService.CreateAsync(ClusterRequest!, CancellationToken.None);
        }
        else
        {
            await ClusterService.UpdateAsync(ClusterId, ClusterRequest!, CancellationToken.None);
        }

        NavigationManager.NavigateTo("/clusters");
    }

    private void HandleInvalidSubmit()
    { 
    }

    private void AddDestination()
    {
        ClusterRequest?.Destinations?.Add(new Destination { Id = Guid.NewGuid() });
    }

    private void RemoveDestination(Destination destination)
    {
        ClusterRequest?.Destinations?.Remove(destination);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/clusters");
    }
}
